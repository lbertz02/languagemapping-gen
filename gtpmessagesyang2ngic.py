"""ngic style gtp ie output plugin
"""

# pylint: disable=C0111

from __future__ import print_function

import optparse
import logging
import numbers

from pyang import plugin
from pyang import statements
from pyang import types
from pyang import error

logging.basicConfig(filename="test.log", level=logging.DEBUG)

def pyang_plugin_init():
    plugin.register_plugin(gtp2ngicMessagePlugin())

class gtp2ngicMessagePlugin(plugin.PyangPlugin):
    def add_output_format(self, fmts):
        fmts['ngic-message'] = self

    def add_opts(self, optparser):
        optlist = [
            optparse.make_option('--ngic-message-debug',
                                 dest='ngic_debug',
                                 action="store_true",
                                 help='NGIC Message Generator debug'),
            optparse.make_option('--ngic-message-path',
                                 dest='gen_path',
                                 help='NGIC Message Generator path'),
            optparse.make_option('--ngic-message-title',
                                 dest='gen_title',
                                 help='NGIC Message Generator title')
            ]

        group = optparser.add_option_group("NGIC Message Generator specific options")
        group.add_options(optlist)

    def setup_ctx(self, ctx):
        ctx.opts.stmts = None

    def setup_fmt(self, ctx):
        ctx.implicit_errors = False

    def emit(self, ctx, modules, fd):
        root_stmt = modules[0]
        if ctx.opts.schema_debug:
            logging.basicConfig(level=logging.DEBUG)
            print("")
        if ctx.opts.schema_path is not None:
            logging.debug("schema_path: %s", ctx.opts.schema_path)
            path = ctx.opts.schema_path
            root_stmt = find_stmt_by_path(modules[0], path)
        else:
            path = None

        if ctx.opts.schema_title is not None:
            schema_title = ctx.opts.schema_title
        else:
            schema_title = root_stmt.arg

        description_str = "Generated by pyang from module %s" % modules[0].arg
        result = "/* GTP Message Type Values */\n"

        # Produce Registry values
        msg_reg = {}
        counter = 1000
        if root_stmt.i_groupings is not None and len(root_stmt.i_groupings) > 0:
            msgs = [x for x in root_stmt.i_groupings.values() if is_message(x)]
            for stmt in msgs:
                try:
                    w = int(get_substmt( (u'ts29274-messages-f40', u'messageTypeValue'), stmt).arg)
                except ValueError:
                    w = counter
                    counter += 1
                msg_reg[w] = stmt.arg
            if len(msgs) > 0:
                for key in sorted(msg_reg.iterkeys()):
                    result += "{:<75}".format("#define GTP_" + msg_reg[key].upper()) + "(" + str(key) +")\n"

        generated_msgs = []
        for msg in msgs:
            if msg.arg not in generated_msgs:
                (name, type, typeValue) = get_message_info(msg)
                basename = "_".join( name.lower().split("_")[:-1] )
                companion_message = None
                for x in msgs:
                    if x.arg.startswith(basename) and x.arg != name:
                        companion_message = x
                        logging.debug("Found %s companion message for %s", x.arg, name)
                if companion_message is None:
                    logging.debug("Did not find companion message for %s", name)
#else:
#Do stuff

                generated_msgs.append(msg)
                if companion_message is not None:
                    generated_msgs.append(companion_message)

        hdr_file = open("gtpv2.h","w")
        hdr_file.write(result)
        hdr_file.close()

        fd.write( "Processing Complete" )

def get_substmts(name, stmt):
    if hasattr(stmt, 'substmts'):
        return [x for x in stmt.substmts if x.keyword == name]
    return []

def get_substmt(name, stmt):
    x = get_substmts(name, stmt)
    if len(x) > 0:
        return x[0]
    return None

def is_message(stmt):
    if hasattr(stmt, 'substmts'):
        y = [x for x in stmt.substmts if x.keyword == (u'ts29274-messages-f40', u'messageType') ]
        if len(y) > 0:
            return True
    return False

def get_message_info(stmt):
    return ( stmt.arg, get_substmt((u'ts29274-messages-f40', u'messageType'), stmt), get_substmt((u'ts29274-messages-f40', u'messageTypeValue'), stmt) )
